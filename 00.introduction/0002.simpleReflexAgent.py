# 0002 : 状態遷移を持つエージェント
# 
# 人工知能開発では、代行者(agent)を作ります。
# 最も簡単なエージェントのモデルとして、入力に対する行動を返すエージェントを紹介します。
# 別名、オートマトン。システム設計では状態遷移図と言います。
# 特に、状態が有限（例えば、自販機の最大入金は1万円とする）ものを有限オートマトンと言います。
# 状態と入力から。出力を判断します。
#   input ∈ Input (入力の集合)
#   status ∈ Status（状態の集合）
#   action ∈ Action（行動の集合）
#   rule ∈ Rule (inputに対する、actionを書き下した集合)
#   agent ∈ Agent（エージェントの集合）
#
# モデル式： A = (I,S,A,R)
# 例：入力した硬貨と自動販売機に残った残高が出てくる自動販売機
#    手続きでプログラミングしようとすると見通しが悪くなってきました。残高の管理して、関数呼び出しに自販機の残高をセットする必要があります。

def simple_reflex_agent(input,status) :
    returnValue = input + status
    status = 0
    return {'status':status,'return':returnValue}

print(simple_reflex_agent(10,5))        # 自動販売機に10円残っていて、5円硬貨を入力した時の挙動
print(simple_reflex_agent(400,100))     # 自動販売機に400円残っていて、100円硬貨を入力した時の挙動

# C言語等の手続き型言語では、残高を「関数を使う側で管理」して、関数呼び出しの時に伝える必要がありました。
# エージェントに残高管理もして欲しい。そんなニーズから生まれたのが、オブジェクト指向言語。世界で最初に作られたオブジェクト指向言語はSmallTalkと言われています。